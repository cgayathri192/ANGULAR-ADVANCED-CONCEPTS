State management in Angular refers to the process of managing the state or
data of an application throughout its lifecycle. This can involve sharing data between components,
updating the UI based on changes to that data,
and keeping the data synchronized across different parts of the application.

There are several ways to manage state in Angular, including:

->Component State: The state can be managed within individual components, making it local and encapsulated.

->@Input and @Output Decorators: Angular provides these decorators to pass data between parent and child components.

->Services: Services can be used to manage and share data across the application, and can be injected into multiple components.

->RxJS: RxJS is a reactive programming library that can be used to manage state in Angular applications.

->Ngrx: Ngrx is a popular library for state management in Angular, which provides a centralized store for managing state,
      along with tools for managing actions and side effects.

----------------------------------------------------------------------------------------------------------------------------------------------

In Angular, state management can be done using the ngrx library.
Ngrx provides a set of tools for managing the state of an Angular application, including Store, Actions, Reducers, and Selectors.

Store: It is a single source of truth for the state of the application. The state is stored in a single,
	 immutable data structure and can be updated only through dispatched actions.

Actions: It is a plain object that represents an event that can change the state of the application.

Reducers: A pure function that takes the current state and an action as inputs and returns a new state.

Selectors: A pure function that takes the current state and returns a derived piece of data from it.

By using these concepts, ngrx enables efficient and predictable state management in Angular applications,
making it easier to build, test, and maintain complex applications.