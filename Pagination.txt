In Angular, pagination refers to the process of dividing large amounts of data into smaller, more manageable chunks, and displaying them in a user-friendly way. This is typically achieved by splitting data into multiple pages, with each page displaying a specific number of items.

Angular provides built-in support for pagination through the ngx-pagination library, which provides a simple and flexible way to implement pagination in your Angular applications. With ngx-pagination, you can easily configure the number of items displayed per page, customize the appearance of pagination controls, and handle user interactions with pagination buttons.

To use ngx-pagination, you need to install it using NPM and then import it in your Angular module. You can then use the ngx-pagination directive in your HTML template to display paginated data. The directive takes a number of parameters, such as the total number of items, the number of items to display per page, and the current page number.

For example, the following code snippet shows how to use ngx-pagination to display a list of items in a table with pagination controls:

--------------------------------------------------------------------------------------------------------------------------

<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Email</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let item of items | paginate: { itemsPerPage: 10, currentPage: p }">
      <td>{{ item.id }}</td>
      <td>{{ item.name }}</td>
      <td>{{ item.email }}</td>
    </tr>
  </tbody>
</table>
<pagination-controls (pageChange)="p = $event"></pagination-controls>

--------------------------------------------------------------------------------------------------------------------------

In this example, items is an array of data to display, and p is a variable that holds the current page number. The paginate pipe is used to filter the data and display only the items for the current page, based on the itemsPerPage and currentPage parameters. The pagination-controls component displays the pagination controls and emits a pageChange event whenever the user clicks a pagination button, which updates the p variable and triggers a re-render of the data.



code for pagination

--------------------------------------------------------------------------------------------------------------------------

1.First, create a pagination service to handle the pagination logic:


import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class PaginationService {

  constructor() { }

  paginate(items: any[], currentPage: number = 1, pageSize: number = 10): any[] {
    const startIndex = (currentPage - 1) * pageSize;
    return items.slice(startIndex, startIndex + pageSize);
  }
}

--------------------------------------------------------------------------------------------------------------------------

2.In your component, import the pagination service and use it to paginate your data:

import { Component, OnInit } from '@angular/core';
import { PaginationService } from '../pagination.service';

@Component({
  selector: 'app-my-component',
  templateUrl: './my-component.component.html',
  styleUrls: ['./my-component.component.css']
})
export class MyComponentComponent implements OnInit {

  data: any[] = [];
  currentPage: number = 1;
  pageSize: number = 10;

  constructor(private paginationService: PaginationService) { }

  ngOnInit(): void {
    // Get your data from a service or API
    this.data = [...];
  }

  get paginatedData(): any[] {
    return this.paginationService.paginate(this.data, this.currentPage, this.pageSize);
  }

  onPageChange(page: number): void {
    this.currentPage = page;
  }

}

--------------------------------------------------------------------------------------------------------------------------

3.In your template, display the paginated data and create a pagination control:

<div *ngFor="let item of paginatedData">
  {{ item }}
</div>

<app-pagination
  [currentPage]="currentPage"
  [pageSize]="pageSize"
  [totalItems]="data.length"
  (pageChange)="onPageChange($event)">
</app-pagination>

--------------------------------------------------------------------------------------------------------------------------

4.Finally, create a pagination component to handle the pagination control:

import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-pagination',
  templateUrl: './pagination.component.html',
  styleUrls: ['./pagination.component.css']
})
export class PaginationComponent {

  @Input() currentPage: number = 1;
  @Input() pageSize: number = 10;
  @Input() totalItems: number = 0;

  @Output() pageChange = new EventEmitter<number>();

  get totalPages(): number {
    return Math.ceil(this.totalItems / this.pageSize);
  }

  get pages(): number[] {
    const pages: number[] = [];
    for (let i = 1; i <= this.totalPages; i++) {
      pages.push(i);
    }
    return pages;
  }

  onPageClick(page: number): void {
    this.currentPage = page;
    this.pageChange.emit(page);
  }

}

--------------------------------------------------------------------------------------------------------------------------

5.Finally, create a pagination component template to display the pagination control:

<ul class="pagination">
  <li class="page-item" [ngClass]="{ disabled: currentPage === 1 }">
    <a class="page-link" (click)="onPageClick(1)">First</a>
  </li>
  <li class="page-item" [ngClass]="{ disabled: currentPage === 1 }">
    <a class="page-link" (click)="onPageClick(currentPage - 1)">Previous</a>
  </li>
  <li class="page-item" *ngFor="let page of pages" [ngClass]="{ active: currentPage === page }">
    <a class="page-link" (click)="onPageClick(page)">{{ page }}</a>
  </li>
  <li class="page-item" [ngClass]="{ disabled: currentPage === totalPages }">
    <a class="page-link

--------------------------------------------------------------------------------------------------------------------------
